# Production Dockerfile for Go Backend
FROM golang:1.24-alpine AS builder

WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    git \
    ca-certificates \
    tzdata \
    gcc \
    musl-dev

# Copy go mod files
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Run tests
RUN go test -v ./...

# Build the application with optimizations
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -trimpath \
    -o main ./cmd/server

# Verify the binary
RUN chmod +x main && ./main --version 2>/dev/null || echo "Binary built successfully"

# Production stage
FROM alpine:3.21 AS production

# Create app user
RUN addgroup -g 1001 -S app && \
    adduser -u 1001 -S app -G app

# Install runtime dependencies
RUN apk --no-cache add \
    ca-certificates \
    tzdata \
    curl \
    && update-ca-certificates

# Set timezone
ENV TZ=UTC

WORKDIR /app

# Copy the binary
COPY --from=builder --chown=app:app /app/main .

# Create necessary directories
RUN mkdir -p /app/logs && chown -R app:app /app

# Switch to non-root user
USER app:app

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the binary
ENTRYPOINT ["./main"]
