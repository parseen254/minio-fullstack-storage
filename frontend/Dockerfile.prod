# Production Dockerfile for Next.js Frontend
FROM node:slim AS base

# Install dependencies only when needed
RUN apk add --no-cache \
    libc6-compat \
    tini

WORKDIR /app

# Copy package files for better layer caching
COPY package.json package-lock.json* ./

# Builder stage
FROM base AS builder

# Install all dependencies (including devDependencies for build)
RUN npm ci --include=dev

# Copy source code
COPY . .

# Set production environment for build
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# Build the application
RUN npm run build

# Production stage
FROM node:slim AS production

# Install security updates and runtime dependencies
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tini \
    && apk upgrade \
    && rm -rf /var/cache/apk/*

WORKDIR /app

# Create nextjs user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy production dependencies only
COPY package.json package-lock.json* ./
RUN npm ci --omit=dev --ignore-scripts && npm cache clean --force

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static
COPY --from=builder --chown=nextjs:nodejs /app/public ./public

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set production environment variables
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

# Use tini for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Start the production server
CMD ["node", "server.js"]
